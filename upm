#!/usr/bin/env python3
from os import popen, remove, system
from os.path import expanduser
from sys import argv
### vars
version = '0.0.2'
### start
try:
	open(expanduser('~') + '/.config/upm', 'r+')
except:
	open(expanduser('~') + '/.config/upm', 'a')
while 1:
	with open(expanduser('~') + '/.config/upm', 'r+') as file:
		if file.readline() != version + '\n':
			remove(expanduser('~') + '/.config/upm')
			open(expanduser('~') + '/.config/upm', 'a')
			with open(expanduser('~') + '/.config/upm', 'r+') as file:
				file.write(version + '\n')
				tmp = input('flatpak_enabled=(0/1): ')
				while tmp != '0' and tmp != '1':
					tmp = input('flatpak_enabled=(0/1): ')
				file.write(tmp + '\n')
				tmp = input('snapd_enabled=(0/1): ')
				while tmp != '0' and tmp != '1':
					tmp = input('snapd_enabled=(0/1): ')
				file.write(tmp + '\n')
				tmp = input('hold_enabled=(0/1): ')
				while tmp != '0' and tmp != '1':
					tmp = input('hold_enabled=(0/1): ')
				file.write(tmp + '\n')
		else:
			pass
		with open(expanduser('~') + '/.config/upm', 'r+') as file:
			file.seek(0)
			version = file.readline().splitlines()[0]
			try:
				flatpak_enabled = int(file.readline())
				snapd_enabled = int(file.readline())
				hold_enabled = int(file.readline())
				break
			except:
				remove(expanduser('~') + '/.config/upm')
### defs
def check():
	if int(popen('id -u').read()) == 0:
		return ''
	else:
		return 'sudo '
def msg(tmp):
	if hold_enabled == 1:
		print()
		if tmp == 0:
			input('press ctrl+c to cancel before flatpak; press enter to continue')
		elif tmp == 1:
			input('press ctrl+c to cancel before snapd; press enter to continue')
		else:
			pass
	else:
		pass
def param():
	tmp = ''
	for x in range(1,len(argv)):
		db = ['--copytight', '-c', '--help', '-h', '--version', '-v', '--traditional', '-t', '--flatpak', '-f', '--snapd', '-s', 'autoremove', 'info', 'install', 'in', 'remove', 'rm', 'search', 'se', 'update', 'up']
		if(argv[x] not in db):
			if tmp == '':
				tmp = argv[x]
			else:
				tmp = tmp + ' ' + argv[x]
		else:
			pass
	return tmp
### bash
def bash(tmp):
	if tmp == 'copyright':
		print('MIT License')
		print()
		print('Copyright (c) 2021 Robert Kagan')
		print()
		print('Permission is hereby granted, free of charge, to any person obtaining a copy')
		print('of this software and associated documentation files (the "Software"), to deal')
		print('in the Software without restriction, including without limitation the rights')
		print('to use, copy, modify, merge, publish, distribute, sublicense, and/or sell')
		print('copies of the Software, and to permit persons to whom the Software is')
		print('furnished to do so, subject to the following conditions:')
		print()
		print('The above copyright notice and this permission notice shall be included in all')
		print('copies or substantial portions of the Software.')
		print()
		print('THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR')
		print('IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,')
		print('FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE')
		print('AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER')
		print('LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,')
		print('OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE')
		print('SOFTWARE.')
	elif tmp == 'help':
		print(popen('echo $SHELL').read().splitlines()[0].split('/')[-1] + ' (1/2):')
		print('\t--copyright\t-c')
		print('\t--help\t\t-h')
		print('\t--version\t-v')
		print(popen('echo $SHELL').read().splitlines()[0].split('/')[-1] + ' (2/2):')
		print('\t--traditional\t-t')
		print('\t--flatpak\t-f')
		print('\t--snapd\t\t-s')
		print('upm (1/1):')
		print('\tautoremove')
		print('\tinfo')
		print('\tinstall\t\tin')
		print('\tremove\t\trm')
		print('\tsearch\t\tse')
		print('\tupdate\t\tup')
	elif tmp == 'version':
		print('upm ' + version + ' (' + popen('uname -m').read().splitlines()[0] + ')')
	else:
		pass
### upm
def upm(tmp):
	if tmp == 'update':
		system('wget https://raw.githubusercontent.com/libalis/upm/main/upm && chmod +x upm && ' + check() + 'mv upm /bin/')
	else:
		pass
### traditional
def traditional(tmp):
	if tmp == 'autoremove':
		if popen('grep -e arch /etc/*-release').read() != '':
			with open('/tmp/upm', 'a') as file:
				file.write('pacman -Rscn $(pacman -Qdtq)\n')
				file.write('rm -rf /tmp/upm\n')
			system(check() + 'bash /tmp/upm && ' + check() + 'pacman -Scc')
		elif popen('grep -e debian -e ubuntu /etc/*-release').read() != '':
			system(check() + 'apt autoremove --purge && ' + check() + 'apt clean')
		elif popen('grep -e fedora /etc/*-release').read() != '':
			system(check() + 'dnf autoremove && ' + check() + 'dnf clean all')
		elif popen('grep -e opensuse /etc/*-release').read() != '':
			with open('/tmp/upm', 'a') as file:
				file.write("zypper packages --unneeded | awk -F'|' 'NR==0 || NR==1 || NR==2 || NR==3 || NR==4 {next} {print $3}' > /tmp/zyp\n")
				file.write('while read p; do sudo zypper -n rm "$p"; done < /tmp/zyp\n')
				file.write('rm -rf /tmp/zyp\n')
				file.write('rm -rf /tmp/upm\n')
			system(check() + 'bash /tmp/upm && ' + check() + 'zypper clean')
		else:
			pass
	elif tmp == 'info':
		if popen('grep -e arch /etc/*-release').read() != '':
			system(check() + 'pacman -Si ' + param())
		elif popen('grep -e debian -e ubuntu /etc/*-release').read() != '':
			system(check() + 'apt info ' + param())
		elif popen('grep -e fedora /etc/*-release').read() != '':
			system(check() + 'dnf info ' + param())
		elif popen('grep -e opensuse /etc/*-release').read() != '':
			system(check() + 'zypper info ' + param())
		else:
			pass
	elif tmp == 'install':
		if popen('grep -e arch /etc/*-release').read() != '':
			system(check() + 'pacman -S ' + param())
		elif popen('grep -e debian -e ubuntu /etc/*-release').read() != '':
			system(check() + 'apt install ' + param())
		elif popen('grep -e fedora /etc/*-release').read() != '':
			system(check() + 'dnf install ' + param())
		elif popen('grep -e opensuse /etc/*-release').read() != '':
			system(check() + 'zypper install ' + param())
		else:
			pass
	elif tmp == 'remove':
		if popen('grep -e arch /etc/*-release').read() != '':
			system(check() + 'pacman -Rscn ' + param())
		elif popen('grep -e debian -e ubuntu /etc/*-release').read() != '':
			system(check() + 'apt purge ' + param())
		elif popen('grep -e fedora /etc/*-release').read() != '':
			system(check() + 'dnf remove ' + param())
		elif popen('grep -e opensuse /etc/*-release').read() != '':
			system(check() + 'zypper remove --clean-deps ' + param())
		else:
			pass
	elif tmp == 'search':
		if popen('grep -e arch /etc/*-release').read() != '':
			system(check() + 'pacman -Ss ' + param())
		elif popen('grep -e debian -e ubuntu /etc/*-release').read() != '':
			system(check() + 'apt search ' + param())
		elif popen('grep -e fedora /etc/*-release').read() != '':
			system(check() + 'dnf search ' + param())
		elif popen('grep -e opensuse /etc/*-release').read() != '':
			system(check() + 'zypper search ' + param())
		else:
			pass
	elif tmp == 'update':
		if popen('grep -e arch /etc/*-release').read() != '':
			system(check() + 'pacman -Syyu')
		elif popen('grep -e debian -e ubuntu /etc/*-release').read() != '':
			system(check() + 'apt update && ' + check() + 'apt full-upgrade')
		elif popen('grep -e fedora /etc/*-release').read() != '':
			system(check() + 'dnf upgrade --refresh')
		elif popen('grep -e opensuse /etc/*-release').read() != '':
			system(check() + 'zypper refresh --force && ' + check() + 'zypper dist-upgrade')
		else:
			pass
	else:
		pass
### flatpak
def flatpak(tmp):
	if tmp == 'autoremove':
		system(check() + 'flatpak remove --unused')
	elif tmp == 'info':
		system(check() + 'flatpak remote-info flathub ' + param())
	elif tmp == 'install':
		system(check() + 'flatpak install ' + param())
	elif tmp == 'remove':
		system(check() + 'flatpak remove --delete-data ' + param())
	elif tmp == 'search':
		system(check() + 'flatpak search ' + param())
	elif tmp == 'update':
		system(check() + 'flatpak update')
	else:
		pass
### snapd
def snapd(tmp):
	if tmp == 'autoremove':
		with open('/tmp/upm', 'a') as file:
			file.write("snap list --all | awk '/disabled/{print $1, $3}' |\n")
			file.write('\twhile read snapname revision; do\n')
			file.write('\t\tsnap remove "$snapname" --revision="$revision"\n')
			file.write('\tdone\n')
			file.write('rm -rf /tmp/upm\n')
		system(check() + 'bash /tmp/upm')
	elif tmp == 'info':
		system(check() + 'snap info ' + param())
	elif tmp == 'install':
		system(check() + "snap install " + param())
	elif tmp == 'remove':
		system(check() + 'snap remove --purge ' + param())
		for x in range(2,len(argv)):
			system(check() + 'rm -rf ~/snap/' + argv[x])
	elif tmp == 'search':
		system(check() + 'snap search ' + param())
	elif tmp == 'update':
		system(check() + 'snap refresh')
	else:
		pass
### main
try:
	if '--copyright' in argv or '-c' in argv:
		bash('copyright')
		exit()
	else:
		pass
	if '--help' in argv or '-h' in argv:
		bash('help')
		exit()
	else:
		pass
	if '--version' in argv or '-v' in argv:
		bash('version')
		exit()
	else:
		pass
	if '--traditional' not in argv and '-t' not in argv and '--flatpak' not in argv and '-f' not in argv and '--snapd' not in argv and '-s' not in argv:
		if 'autoremove' in argv:
			traditional('autoremove')
			if flatpak_enabled == 1:
				msg(0)
				flatpak('autoremove')
			else:
				pass
			if snapd_enabled == 1:
				msg(1)
				snapd('autoremove')
			else:
				pass
		elif 'info' in argv:
			traditional('info')
			if flatpak_enabled == 1:
				msg(0)
				flatpak('info')
			else:
				pass
			if snapd_enabled == 1:
				msg(1)
				snapd('info')
			else:
				pass
		elif 'install' in argv or 'in' in argv:
			traditional('install')
			if flatpak_enabled == 1:
				msg(0)
				flatpak('install')
			else:
				pass
			if snapd_enabled == 1:
				msg(1)
				snapd('install')
			else:
				pass
		elif 'remove' in argv or 'rm' in argv:
			traditional('remove')
			if flatpak_enabled == 1:
				msg(0)
				flatpak('remove')
			else:
				pass
			if snapd_enabled == 1:
				msg(1)
				snapd('remove')
			else:
				pass
		elif 'search' in argv or 'se' in argv:
			traditional('search')
			if flatpak_enabled == 1:
				msg(0)
				flatpak('search')
			else:
				pass
			if snapd_enabled == 1:
				msg(1)
				snapd('search')
			else:
				pass
		elif 'update' in argv or 'up' in argv:
			traditional('update')
			if flatpak_enabled == 1:
				msg(0)
				flatpak('update')
			else:
				pass
			if snapd_enabled == 1:
				msg(1)
				snapd('update')
			else:
				pass
			upm('update')
		else:
			bash('help')
			exit()
	else:
		pass
	if '--traditional' in argv or '-t' in argv:
		if 'autoremove' in argv:
			traditional('autoremove')
		elif 'info' in argv:
			traditional('info')
		elif 'install' in argv or 'in' in argv:
			traditional('install')
		elif 'remove' in argv or 'rm' in argv:
			traditional('remove')
		elif 'search' in argv or 'se' in argv:
			traditional('search')
		elif 'update' in argv or 'up' in argv:
			traditional('update')
		else:
			pass
	else:
		pass
	if '--flatpak' in argv or '-f' in argv:
		if 'autoremove' in argv:
			flatpak('autoremove')
		elif 'info' in argv:
			flatpak('info')
		elif 'install' in argv or 'in' in argv:
			flatpak('install')
		elif 'remove' in argv or 'rm' in argv:
			flatpak('remove')
		elif 'search' in argv or 'se' in argv:
			flatpak('search')
		elif 'update' in argv or 'up' in argv:
			flatpak('update')
		else:
			pass
	else:
		pass
	if '--snapd' in argv or '-s' in argv:
		if 'autoremove' in argv:
			snapd('autoremove')
		elif 'info' in argv:
			snapd('info')
		elif 'install' in argv or 'in' in argv:
			snapd('install')
		elif 'remove' in argv or 'rm' in argv:
			snapd('remove')
		elif 'search' in argv or 'se' in argv:
			snapd('search')
		elif 'update' in argv or 'up' in argv:
			snapd('update')
		else:
			pass
	else:
		pass
except IndexError:
	bash('help')
