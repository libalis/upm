#!/usr/bin/env python3
from os import popen, remove, system
from os.path import expanduser
from sys import argv
### vars
version = '0.0.5'
db_cmds = ['--copyright', '-c', '--help', '-h', '--reset', '-r', '--version', '-v', '--traditional', '-t', '--flatpak', '-f', '--snapd', '-s', 'autoremove', 'info', 'install', 'in', 'remove', 'rm', 'search', 'se', 'update', 'up']
db_params = [None] * len(db_cmds)
for x in range(len(db_cmds)):
	if '-' in db_cmds[x]:
		for y in range(len(db_params)):
			if db_params[y] == None:
				db_params[y] = db_cmds[x]
				break
			else:
				pass
	else:
		pass
### upm
def upm(tmp):
	if tmp == 'copyright':
		print('MIT License')
		print()
		print('Copyright (c) 2021 Robert Kagan')
		print()
		print('Permission is hereby granted, free of charge, to any person obtaining a copy')
		print('of this software and associated documentation files (the "Software"), to deal')
		print('in the Software without restriction, including without limitation the rights')
		print('to use, copy, modify, merge, publish, distribute, sublicense, and/or sell')
		print('copies of the Software, and to permit persons to whom the Software is')
		print('furnished to do so, subject to the following conditions:')
		print()
		print('The above copyright notice and this permission notice shall be included in all')
		print('copies or substantial portions of the Software.')
		print()
		print('THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR')
		print('IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,')
		print('FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE')
		print('AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER')
		print('LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,')
		print('OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE')
		print('SOFTWARE.')
	elif tmp == 'help':
		print(popen('echo $SHELL').read().splitlines()[0].split('/')[-1] + ' (1/2):')
		print('\t--copyright\t-c')
		print('\t--help\t\t-h')
		print('\t--reset\t\t-r')
		print('\t--version\t-v')
		print(popen('echo $SHELL').read().splitlines()[0].split('/')[-1] + ' (2/2):')
		print('\t--traditional\t-t')
		print('\t--flatpak\t-f')
		print('\t--snapd\t\t-s')
		print('upm (1/1):')
		print('\tautoremove')
		print('\tinfo')
		print('\tinstall\t\tin')
		print('\tremove\t\trm')
		print('\tsearch\t\tse')
		print('\tupdate\t\tup')
	elif tmp == 'reset':
		remove(expanduser('~') + '/.config/upm')
	elif tmp == 'update':
		check_version = popen('cd /tmp/ && wget -q https://raw.githubusercontent.com/libalis/upm/main/README.md && cat README.md && rm -rf README.md').read().splitlines()[0].split(' ')[-1]
		if check_version != version:
			with open('/tmp/upm', 'a') as file:
				file.write('cd /tmp/\n')
				file.write('wget https://github.com/libalis/upm/archive/refs/tags/v' + check_version + '.zip\n')
				file.write('unzip v' + check_version + '.zip\n')
				file.write('chmod +x upm-' + check_version + '/upm\n')
				file.write('sudo mv upm-' + check_version + '/upm /bin/\n')
				file.write('rm -rf v' + check_version + '.zip\n')
				file.write('rm -rf upm-' + check_version + '/\n')
				file.write('rm -rf /tmp/upm\n')
			system(check_root() + 'bash /tmp/upm')
		else:
			pass
	elif tmp == 'version':
		print('upm ' + version + ' (' + popen('uname -m').read().splitlines()[0] + ')')
	else:
		pass
### traditional
def traditional(tmp):
	if tmp == 'autoremove':
		if popen('grep -e arch /etc/*-release').read() != '':
			with open('/tmp/upm', 'a') as file:
				file.write('pacman -Rscn $(pacman -Qdtq)\n')
				file.write('rm -rf /tmp/upm\n')
			system(check_root() + 'bash /tmp/upm && ' + check_root() + 'pacman -Scc')
		elif popen('grep -e debian -e ubuntu /etc/*-release').read() != '':
			system(check_root() + 'apt autoremove --purge && ' + check_root() + 'apt clean')
		elif popen('grep -e fedora /etc/*-release').read() != '':
			system(check_root() + 'dnf autoremove && ' + check_root() + 'dnf clean all')
		elif popen('grep -e opensuse /etc/*-release').read() != '':
			with open('/tmp/upm', 'a') as file:
				file.write("zypper packages --unneeded | awk -F'|' 'NR==0 || NR==1 || NR==2 || NR==3 || NR==4 {next} {print $3}' > /tmp/zyp\n")
				file.write('while read p; do zypper remove --clean-deps "$p"; done < /tmp/zyp\n')
				file.write('rm -rf /tmp/zyp\n')
				file.write('rm -rf /tmp/upm\n')
			system(check_root() + 'bash /tmp/upm && ' + check_root() + 'zypper clean')
		else:
			pass
	elif tmp == 'info':
		if popen('grep -e arch /etc/*-release').read() != '':
			system(check_root() + 'pacman -Si ' + check_params())
		elif popen('grep -e debian -e ubuntu /etc/*-release').read() != '':
			system(check_root() + 'apt info ' + check_params())
		elif popen('grep -e fedora /etc/*-release').read() != '':
			system(check_root() + 'dnf info ' + check_params())
		elif popen('grep -e opensuse /etc/*-release').read() != '':
			system(check_root() + 'zypper info ' + check_params())
		else:
			pass
	elif tmp == 'install':
		if popen('grep -e arch /etc/*-release').read() != '':
			system(check_root() + 'pacman -S ' + check_params())
		elif popen('grep -e debian -e ubuntu /etc/*-release').read() != '':
			system(check_root() + 'apt install ' + check_params())
		elif popen('grep -e fedora /etc/*-release').read() != '':
			system(check_root() + 'dnf install ' + check_params())
		elif popen('grep -e opensuse /etc/*-release').read() != '':
			system(check_root() + 'zypper install ' + check_params())
		else:
			pass
	elif tmp == 'remove':
		if popen('grep -e arch /etc/*-release').read() != '':
			system(check_root() + 'pacman -Rscn ' + check_params())
		elif popen('grep -e debian -e ubuntu /etc/*-release').read() != '':
			system(check_root() + 'apt purge ' + check_params())
		elif popen('grep -e fedora /etc/*-release').read() != '':
			system(check_root() + 'dnf remove ' + check_params())
		elif popen('grep -e opensuse /etc/*-release').read() != '':
			system(check_root() + 'zypper remove --clean-deps ' + check_params())
		else:
			pass
	elif tmp == 'search':
		if popen('grep -e arch /etc/*-release').read() != '':
			system(check_root() + 'pacman -Ss ' + check_params())
		elif popen('grep -e debian -e ubuntu /etc/*-release').read() != '':
			system(check_root() + 'apt search ' + check_params())
		elif popen('grep -e fedora /etc/*-release').read() != '':
			system(check_root() + 'dnf search ' + check_params())
		elif popen('grep -e opensuse /etc/*-release').read() != '':
			system(check_root() + 'zypper search ' + check_params())
		else:
			pass
	elif tmp == 'update':
		if popen('grep -e arch /etc/*-release').read() != '':
			system(check_root() + 'pacman -Syyu')
		elif popen('grep -e debian -e ubuntu /etc/*-release').read() != '':
			system(check_root() + 'apt update && ' + check_root() + 'apt full-upgrade')
		elif popen('grep -e fedora /etc/*-release').read() != '':
			system(check_root() + 'dnf upgrade --refresh')
		elif popen('grep -e opensuse /etc/*-release').read() != '':
			system(check_root() + 'zypper refresh --force && ' + check_root() + 'zypper dist-upgrade')
		else:
			pass
	else:
		pass
### flatpak
def flatpak(tmp):
	if tmp == 'autoremove':
		system(check_root() + 'flatpak remove --delete-data --unused')
	elif tmp == 'info':
		system(check_root() + 'flatpak remote-info flathub ' + check_params())
	elif tmp == 'install':
		system(check_root() + 'flatpak install ' + check_params())
	elif tmp == 'remove':
		system(check_root() + 'flatpak remove --delete-data ' + check_params())
	elif tmp == 'search':
		system(check_root() + 'flatpak search ' + check_params())
	elif tmp == 'update':
		system(check_root() + 'flatpak update')
	else:
		pass
### snapd
def snapd(tmp):
	if tmp == 'autoremove':
		with open('/tmp/upm', 'a') as file:
			file.write("snap list --all | awk '/disabled/{print $1, $3}' |\n")
			file.write('\twhile read snapname revision; do\n')
			file.write('\t\tsnap remove --purge "$snapname" --revision="$revision"\n')
			file.write('\tdone\n')
			file.write('rm -rf /tmp/upm\n')
		system(check_root() + 'bash /tmp/upm')
	elif tmp == 'info':
		system(check_root() + 'snap info ' + check_params())
	elif tmp == 'install':
		system(check_root() + "snap install " + check_params())
	elif tmp == 'remove':
		system(check_root() + 'snap remove --purge ' + check_params())
		for x in range(1,len(argv)):
			if argv[x] not in db_cmds:
				system(check_root() + 'rm -rf ~/snap/' + argv[x])
			else:
				pass
	elif tmp == 'search':
		system(check_root() + 'snap search ' + check_params())
	elif tmp == 'update':
		system(check_root() + 'snap refresh')
	else:
		pass
### checks
def check_no_params(tmp):
	for x in range(len(tmp)):
		if tmp[x] in argv:
			for y in range(1,len(argv)):
				if argv[y] not in db_params and argv[y] != tmp[x]:
					upm('help')
					exit()
				else:
					pass
def check_params():
	tmp = ''
	for x in range(1,len(argv)):
		if(argv[x] not in db_cmds):
			if tmp == '':
				tmp = argv[x]
			else:
				tmp = tmp + ' ' + argv[x]
		else:
			pass
	return tmp
def check_root():
	if int(popen('id -u').read()) == 0:
		return ''
	else:
		return 'sudo '
def check_skip(tmp):
	if hold_enabled == 1:
		if tmp == 0:
			result = input('Do you want to skip traditional? [y/N]: ')
		elif tmp == 1:
			result = input('Do you want to skip flatpak? [y/N]: ')
		elif tmp == 2:
			result = input('Do you want to skip snapd? [y/N]: ')
		else:
			pass
		if result == 'y' or result == 'Y':
			return True
		else:
			return False
	else:
		pass
def check_yes_params(tmp):
	for x in range(len(tmp)):
		if tmp[x] in argv:
			result = False
			for y in range(1,len(argv)):
				if argv[y] not in db_params and argv[y] != tmp[x]:
					result = True
					break
				else:
					pass
			if result == False:
				upm('help')
				exit()
			else:
				pass
		else:
			pass
### start
while True:
	try:
		open(expanduser('~') + '/.config/upm', 'r')
	except:
		open(expanduser('~') + '/.config/upm', 'a')
	with open(expanduser('~') + '/.config/upm', 'r') as file:
		if file.readline() != version + '\n':
			remove(expanduser('~') + '/.config/upm')
			with open(expanduser('~') + '/.config/upm', 'a') as file:
				file.write(version + '\n')
				tmp = input('traditional_enabled=(0/1): ')
				while tmp != '0' and tmp != '1':
					tmp = input('traditional_enabled=(0/1): ')
				file.write(tmp + '\n')
				tmp = input('flatpak_enabled=(0/1): ')
				while tmp != '0' and tmp != '1':
					tmp = input('flatpak_enabled=(0/1): ')
				file.write(tmp + '\n')
				tmp = input('snapd_enabled=(0/1): ')
				while tmp != '0' and tmp != '1':
					tmp = input('snapd_enabled=(0/1): ')
				file.write(tmp + '\n')
				tmp = input('hold_enabled=(0/1): ')
				while tmp != '0' and tmp != '1':
					tmp = input('hold_enabled=(0/1): ')
				file.write(tmp + '\n')
		else:
			pass
		with open(expanduser('~') + '/.config/upm', 'r') as file:
			version = file.readline().splitlines()[0]
			try:
				traditional_enabled = int(file.readline())
				flatpak_enabled = int(file.readline())
				snapd_enabled = int(file.readline())
				hold_enabled = int(file.readline())
				break
			except:
				remove(expanduser('~') + '/.config/upm')
### main
if len(argv) == 1:
	upm('help')
	exit()
for x in range(1,len(argv)):
	if '-' in argv[x]:
		if argv[x] not in db_params:
			upm('help')
			exit()
		else:
			pass
	else:
		pass
if '--copyright' in argv or '-c' in argv:
	upm('copyright')
	exit()
else:
	pass
if '--help' in argv or '-h' in argv:
	upm('help')
	exit()
else:
	pass
if '--reset' in argv or '-r' in argv:
	upm('reset')
	exit()
if '--version' in argv or '-v' in argv:
	upm('version')
	exit()
else:
	pass
for x in range(1,len(argv)):
	if 'update' in argv[x] or 'up' in argv[x]:
		upm('update')
	else:
		pass
check_no_params(['autoremove', 'update', 'up'])
check_yes_params(['info', 'install', 'in', 'remove', 'rm', 'search', 'se'])
if '--traditional' not in argv and '-t' not in argv and '--flatpak' not in argv and '-f' not in argv and '--snapd' not in argv and '-s' not in argv:
	if 'autoremove' in argv:
		if traditional_enabled == 1:
			if check_skip(0) == False:
				traditional('autoremove')
			else:
				pass
		else:
			pass
		if flatpak_enabled == 1:
			if check_skip(1) == False:
				flatpak('autoremove')
			else:
				pass
		else:
			pass
		if snapd_enabled == 1:
			if check_skip(2) == False:
				snapd('autoremove')
			else:
				pass
		else:
			pass
	elif 'info' in argv:
		if traditional_enabled == 1:
			if check_skip(0) == False:
				traditional('info')
			else:
				pass
		else:
			pass
		if flatpak_enabled == 1:
			if check_skip(1) == False:
				flatpak('info')
			else:
				pass
		else:
			pass
		if snapd_enabled == 1:
			if check_skip(2) == False:
				snapd('info')
			else:
				pass
		else:
			pass
	elif 'install' in argv or 'in' in argv:
		if traditional_enabled == 1:
			if check_skip(0) == False:
				traditional('install')
			else:
				pass
		else:
			pass
		if flatpak_enabled == 1:
			if check_skip(1) == False:
				flatpak('install')
			else:
				pass
		else:
			pass
		if snapd_enabled == 1:
			if check_skip(2) == False:
				snapd('install')
			else:
				pass
		else:
			pass
	elif 'remove' in argv or 'rm' in argv:
		if traditional_enabled == 1:
			if check_skip(0) == False:
				traditional('remove')
			else:
				pass
		else:
			pass
		if flatpak_enabled == 1:
			if check_skip(1) == False:
				flatpak('remove')
			else:
				pass
		else:
			pass
		if snapd_enabled == 1:
			if check_skip(2) == False:
				snapd('remove')
			else:
				pass
		else:
			pass
	elif 'search' in argv or 'se' in argv:
		if traditional_enabled == 1:
			if check_skip(0) == False:
				traditional('search')
			else:
				pass
		else:
			pass
		if flatpak_enabled == 1:
			if check_skip(1) == False:
				flatpak('search')
			else:
				pass
		else:
			pass
		if snapd_enabled == 1:
			if check_skip(2) == False:
				snapd('search')
			else:
				pass
		else:
			pass
	elif 'update' in argv or 'up' in argv:
		if traditional_enabled == 1:
			if check_skip(0) == False:
				traditional('update')
			else:
				pass
		else:
			pass
		if flatpak_enabled == 1:
			if check_skip(1) == False:
				flatpak('update')
			else:
				pass
		else:
			pass
		if snapd_enabled == 1:
			if check_skip(2) == False:
				snapd('update')
			else:
				pass
		else:
			pass
	else:
		pass
else:
	pass
if '--traditional' in argv or '-t' in argv:
	if 'autoremove' in argv:
		traditional('autoremove')
	elif 'info' in argv:
		traditional('info')
	elif 'install' in argv or 'in' in argv:
		traditional('install')
	elif 'remove' in argv or 'rm' in argv:
		traditional('remove')
	elif 'search' in argv or 'se' in argv:
		traditional('search')
	elif 'update' in argv or 'up' in argv:
		traditional('update')
	else:
		pass
else:
	pass
if '--flatpak' in argv or '-f' in argv:
	if 'autoremove' in argv:
		flatpak('autoremove')
	elif 'info' in argv:
		flatpak('info')
	elif 'install' in argv or 'in' in argv:
		flatpak('install')
	elif 'remove' in argv or 'rm' in argv:
		flatpak('remove')
	elif 'search' in argv or 'se' in argv:
		flatpak('search')
	elif 'update' in argv or 'up' in argv:
		flatpak('update')
	else:
		pass
else:
	pass
if '--snapd' in argv or '-s' in argv:
	if 'autoremove' in argv:
		snapd('autoremove')
	elif 'info' in argv:
		snapd('info')
	elif 'install' in argv or 'in' in argv:
		snapd('install')
	elif 'remove' in argv or 'rm' in argv:
		snapd('remove')
	elif 'search' in argv or 'se' in argv:
		snapd('search')
	elif 'update' in argv or 'up' in argv:
		snapd('update')
	else:
		pass
else:
	pass
